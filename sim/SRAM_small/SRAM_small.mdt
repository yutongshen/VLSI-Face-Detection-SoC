# ///////////////////////////////////////////////////////////////////////////////////
# // 
# //              Synchronous High Speed Single Port SRAM Compiler 
# // 
# //                    UMC 0.18um GenericII Logic Process
# //    __________________________________________________________________________
# // 
# // 
# //        (C) Copyright 2002-2009 Faraday Technology Corp. All Rights Reserved.
# // 
# //      This source code is an unpublished work belongs to Faraday Technology
# //      Corp.  It is considered a trade secret and is not to be divulged or
# //      used by parties who have not received written authorization from
# //      Faraday Technology Corp.
# // 
# //      Faraday's home page can be found at:
# //      http://www.faraday-tech.com/
# //     
# // ________________________________________________________________________________
# // 
# //       Module Name       :  SRAM_small  
# //       Word              :  512         
# //       Bit               :  8           
# //       Byte              :  4           
# //       Mux               :  1           
# //       Power Ring Type   :  port        
# //       Power Ring Width  :  2 (um)      
# //       Output Loading    :  0.01 (pf)   
# //       Input Data Slew   :  0.02 (ns)   
# //       Input Clock Slew  :  0.02 (ns)   
# // 
# // ________________________________________________________________________________
# // 
# //       Library          : FSA0M_A
# //       Memaker          : 200901.2.1
# //       Date             : 2019/01/14 16:00:44
# // 
# // ________________________________________________________________________________
# // 
# //       Library          : FSA0M_A
# //       Memaker          : 200901.2.1
# //       Date             : 2019/01/14 16:00:50
# //
# ///////////////////////////////////////////////////////////////////////////////////
tfgDefineMem -module "SRAM_small" -array_name "Memory_byte0"
tfgDefineMem -module "SRAM_small" -array_name "Memory_byte1"
tfgDefineMem -module "SRAM_small" -array_name "Memory_byte2"
tfgDefineMem -module "SRAM_small" -array_name "Memory_byte3"
tfgDefineMemWrite -module "SRAM_small" -array_name "Memory_byte0" -clk "@(posedge CK)" -cond "CS && ~WEB0" -addr "`<->A" -data "{DI7, DI6, DI5, DI4, DI3, DI2, DI1, DI0}"
tfgDefineMemWrite -module "SRAM_small" -array_name "Memory_byte1" -clk "@(posedge CK)" -cond "CS && ~WEB1" -addr "`<->A" -data "{DI15, DI14, DI13, DI12, DI11, DI10, DI9, DI8}"
tfgDefineMemWrite -module "SRAM_small" -array_name "Memory_byte2" -clk "@(posedge CK)" -cond "CS && ~WEB2" -addr "`<->A" -data "{DI23, DI22, DI21, DI20, DI19, DI18, DI17, DI16}"
tfgDefineMemWrite -module "SRAM_small" -array_name "Memory_byte3" -clk "@(posedge CK)" -cond "CS && ~WEB3" -addr "`<->A" -data "{DI31, DI30, DI29, DI28, DI27, DI26, DI25, DI24}"
tfgDefineMemRead -module "SRAM_small" -array_name "Memory_byte0" -clk "@(posedge CK)" -cond "CS && WEB0" -addr "`<->A" -noe "OE" -out "{DO7, DO6, DO5, DO4, DO3, DO2, DO1, DO0}"
tfgDefineMemRead -module "SRAM_small" -array_name "Memory_byte1" -clk "@(posedge CK)" -cond "CS && WEB1" -addr "`<->A" -noe "OE" -out "{DO15, DO14, DO13, DO12, DO11, DO10, DO9, DO8}"
tfgDefineMemRead -module "SRAM_small" -array_name "Memory_byte2" -clk "@(posedge CK)" -cond "CS && WEB2" -addr "`<->A" -noe "OE" -out "{DO23, DO22, DO21, DO20, DO19, DO18, DO17, DO16}"
tfgDefineMemRead -module "SRAM_small" -array_name "Memory_byte3" -clk "@(posedge CK)" -cond "CS && WEB3" -addr "`<->A" -noe "OE" -out "{DO31, DO30, DO29, DO28, DO27, DO26, DO25, DO24}"
