///////////////////////////////////////////////////////////////////////////////////
// 
//              Synchronous High Speed Single Port SRAM Compiler 
// 
//                    UMC 0.18um GenericII Logic Process
//    __________________________________________________________________________
// 
// 
//        (C) Copyright 2002-2009 Faraday Technology Corp. All Rights Reserved.
// 
//      This source code is an unpublished work belongs to Faraday Technology
//      Corp.  It is considered a trade secret and is not to be divulged or
//      used by parties who have not received written authorization from
//      Faraday Technology Corp.
// 
//      Faraday's home page can be found at:
//      http://www.faraday-tech.com/
//     
// ________________________________________________________________________________
// 
//       Module Name       :  SRAM_small  
//       Word              :  512         
//       Bit               :  8           
//       Byte              :  4           
//       Mux               :  1           
//       Power Ring Type   :  port        
//       Power Ring Width  :  2 (um)      
//       Output Loading    :  0.01 (pf)   
//       Input Data Slew   :  0.02 (ns)   
//       Input Clock Slew  :  0.02 (ns)   
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2019/01/14 16:00:44
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2019/01/14 16:00:50
//
///////////////////////////////////////////////////////////////////////////////////

model SRAM_small (
    A8, A7, A6, A5, A4, A3, A2, A1, A0,
    DI31, DI30, DI29, DI28, DI27, DI26, DI25, DI24, DI23, DI22, DI21, DI20, DI19, DI18, DI17, DI16, DI15, DI14, DI13, DI12, DI11, DI10, DI9, DI8, DI7, DI6, DI5, DI4, DI3, DI2, DI1, DI0,
    DO31, DO30, DO29, DO28, DO27, DO26, DO25, DO24, DO23, DO22, DO21, DO20, DO19, DO18, DO17, DO16, DO15, DO14, DO13, DO12, DO11, DO10, DO9, DO8, DO7, DO6, DO5, DO4, DO3, DO2, DO1, DO0,
    WEB0, WEB1, WEB2, WEB3,
    CK, CS, OE) (

    bist_definition (
        data_out      DO(DO31, DO30, DO29, DO28, DO27, DO26, DO25, DO24, DO23, DO22, DO21, DO20, DO19, DO18, DO17, DO16, DO15, DO14, DO13, DO12, DO11, DO10, DO9, DO8, DO7, DO6, DO5, DO4, DO3, DO2, DO1, DO0);
        data_in       DI(DI31, DI30, DI29, DI28, DI27, DI26, DI25, DI24, DI23, DI22, DI21, DI20, DI19, DI18, DI17, DI16, DI15, DI14, DI13, DI12, DI11, DI10, DI9, DI8, DI7, DI6, DI5, DI4, DI3, DI2, DI1, DI0);
        address       A (A8, A7, A6, A5, A4, A3, A2, A1, A0);
        output_enable OE low;
        write_enable  WEB0 low;
        write_enable  WEB1 low;
        write_enable  WEB2 low;
        write_enable  WEB3 low;
        chip_enable   CS high;

        clock         CK high;
        tech          = FSA0M_A;
        vendor        = "Faraday Technology Inc.";
        version       = "200901.2.1";
        min_address   = 0;
        max_address   = 511;
        data_size     = 32;
        top_column    = 8;
        top_word      = 1;

        descrambling_definition (
            address (
                DSC_A0 = A0;
                DSC_A1 = A1;
                DSC_A2 = A2;
                DSC_A3 = A3;
                DSC_A4 = A4;
                DSC_A5 = A5;
                DSC_A6 = A6;
                DSC_A7 = A7;
                DSC_A8 = A8;
            )
            data_in (
                DSC_DI0 = DI0;
                DSC_DI1 = DI1;
                DSC_DI2 = DI2;
                DSC_DI3 = DI3;
                DSC_DI4 = DI4;
                DSC_DI5 = DI5;
                DSC_DI6 = DI6;
                DSC_DI7 = DI7;
                DSC_DI8 = DI8;
                DSC_DI9 = DI9;
                DSC_DI10 = DI10;
                DSC_DI11 = DI11;
                DSC_DI12 = DI12;
                DSC_DI13 = DI13;
                DSC_DI14 = DI14;
                DSC_DI15 = DI15;
                DSC_DI16 = DI16;
                DSC_DI17 = DI17;
                DSC_DI18 = DI18;
                DSC_DI19 = DI19;
                DSC_DI20 = DI20;
                DSC_DI21 = DI21;
                DSC_DI22 = DI22;
                DSC_DI23 = DI23;
                DSC_DI24 = DI24;
                DSC_DI25 = DI25;
                DSC_DI26 = DI26;
                DSC_DI27 = DI27;
                DSC_DI28 = DI28;
                DSC_DI29 = DI29;
                DSC_DI30 = DI30;
                DSC_DI31 = DI31;
            )
        )
        read_write_port(
            read_cycle(
                assert CS;
                change A;
                expect DO move;
            )
            write_cycle(
                assert CS;
                change A;
                change DI;
                assert WEB0;
                assert WEB1;
                assert WEB2;
                assert WEB3;
                wait;
            )
        )
    )
)
